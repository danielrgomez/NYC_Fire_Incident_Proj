This was the docker compose file used when we wanted to include jupyter notebook in the same container as postgres and pgadmin
This was used for development/testing purposes
version: '3.8'

networks:
  pg-network-fire-incidents:
    driver: bridge

services:
  jupyter:
    build: .
    container_name: fire_incidents_jupyter
    ports:
      - "8888:8888"
    volumes:
      - /home/dgomezpe/My_Projects/DE_Zoomcamp/NYC_Fire_Incident:/home/jovyan/work
    networks:
      - pg-network-fire-incidents

  postgres:
    image: postgres:13
    container_name: fire_incidents_db
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: fire_incidents
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - pg-network-fire-incidents

  pgadmin:
    image: dpage/pgadmin4
    container_name: fire_incidents_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: root
    ports:
      - "8080:80"
    depends_on:
      - postgres
    networks:
      - pg-network-fire-incidents

volumes:
#  postgres_data:







------------------###Official Docker Compose File###-------------------

version: '3.8'

services:
  postgres:
    image: postgres:13
    container_name: fire_incidents_db_container
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: fire_incidents_db
    volumes:
      - ./fire_incidents_postgres:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - pg-network-fire-incidents

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin-fire-incidents-container
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: root
    ports:
      - "8080:80"
    networks:
      - pg-network-fire-incidents
        
networks:
  pg-network-fire-incidents:
    external: true



------------------###Official Docker Compose File###-------------------




-----------------####Other Docker Compose#######-------------------------

  services:
    pgdatabase:
      image: postgres:13
      environment:
        - POSTGRES_USER="root"
        - POSTGRES_PASSWORD="root"
        - POSTGRES_DB="fire_incidents"
      volumes:
        - ./fire_incidents_postgres:/var/lib/postgresql/data:rw
      ports:
        - "5432:5432"
    pgadmin:
      image: dpage/pgadmin4
      environment:
        - PGADMIN_DEFAULT_EMAIL=admin@admin.com
        - PGADMIN_DEFAULT_PASSWORD=root
      ports:
        - "8080:80"

-----------------####Other Docker Compose#######-------------------------





---------Previous Airflow Docker Compose-----------------



version: '3.8'

services:
  postgres:
    image: postgres:13
    container_name: fire_incidents_db_container
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: fire_incidents_db
    volumes:
      - ./fire_incidents_postgres:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - pg-network-fire-incidents

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin-fire-incidents-container
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: root
    ports:
      - "8080:80"
    networks:
      - pg-network-fire-incidents

  airflow-init:
    image: apache/airflow:2.2.3
    environment:
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres_airflow/airflow
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: airflow
      _AIRFLOW_WWW_USER_PASSWORD: airflow
      PYTHONPATH: /My_Projects/DE_Zoomcamp/NYC_Fire_Incident_Proj/etl
    volumes:
      - ./dags:/opt/airflow/dags
      - ./requirements.txt:/requirements.txt
    entrypoint: bash -c "airflow db init"
    networks:
      - pg-network-fire-incidents
    depends_on:
      - postgres_airflow

  postgres_airflow:
    image: postgres:13
    container_name: postgres_airflow
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres_airflow_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - pg-network-fire-incidents

  airflow-webserver:
    image: apache/airflow:2.2.3
    environment:
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres_airflow/airflow
      PYTHONPATH: /My_Projects/DE_Zoomcamp/NYC_Fire_Incident_Proj/etl
    volumes:
      - ./dags:/opt/airflow/dags
      - ./requirements.txt:/requirements.txt
    entrypoint: bash -c "pip install -r /requirements.txt && airflow webserver"
    ports:
      - "9090:8080"
    depends_on:
      - postgres_airflow
    networks:
      - pg-network-fire-incidents

  airflow-scheduler:
    image: apache/airflow:2.2.3
    environment:
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres_airflow/airflow
      PYTHONPATH: /My_Projects/DE_Zoomcamp/NYC_Fire_Incident_Proj/etl
    volumes:
      - ./dags:/opt/airflow/dags
      - ./requirements.txt:/requirements.txt
    entrypoint: bash -c "pip install -r /requirements.txt && airflow scheduler"
    depends_on:
      - postgres_airflow
      - airflow-webserver
    networks:
      - pg-network-fire-incidents

networks:
  pg-network-fire-incidents:
    external: true

volumes:
  postgres_airflow_data:
  postgres_etl_data:



  ---------Previous Airflow Docker Compose-----------------



  version: '3.8'

x-airflow-common:
  &airflow-common
  # In order to add custom dependencies or upgrade provider packages you can use your extended image.
  # Comment the image line, place your Dockerfile in the directory where you placed the docker-compose.yaml
  # and uncomment the "build" line below, Then run `docker-compose build` to build the images.
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.10.5}
  # build: .
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    # yamllint disable rule:line-length
    # Use simple http server on scheduler for health checks
    # See https://airflow.apache.org/docs/apache-airflow/stable/administration-and-deployment/logging-monitoring/check-health.html#scheduler-health-check-server
    # yamllint enable rule:line-length
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    # WARNING: Use _PIP_ADDITIONAL_REQUIREMENTS option ONLY for a quick checks
    # for other purpose (development, test and especially production usage) build/extend Airflow image.
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    # The following line can be used to set a custom config file, stored in the local config folder
    # If you want to use it, outcomment it and replace airflow.cfg with the name of your config file
    # AIRFLOW_CONFIG: '/opt/airflow/config/airflow.cfg'
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy


services:

  postgres_airflow:
    image: postgres:13
    container_name: postgres_airflow
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres_airflow_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    #ports:
    #  - "5433:5432"
    networks:
      - pg-network-fire-incidents

  redis:
    # Redis is limited to 7.2-bookworm due to licencing change
    # https://redis.io/blog/redis-adopts-dual-source-available-licensing/
    image: redis:7.2-bookworm
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always
    networks:
      - pg-network-fire-incidents

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    #image: apache/airflow:2.2.3
    environment:
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres_airflow/airflow
      PYTHONPATH: /My_Projects/DE_Zoomcamp/NYC_Fire_Incident_Proj/etl
    volumes:
      - ./dags:/opt/airflow/dags
      - ./requirements.txt:/requirements.txt
    entrypoint: bash -c "pip install -r /requirements.txt && airflow webserver"
    ports:
      - "9090:8080"
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - pg-network-fire-incidents


  airflow-scheduler:
    #image: apache/airflow:2.2.3
    <<: *airflow-common
    command: scheduler
    environment:
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres_airflow/airflow
      PYTHONPATH: /My_Projects/DE_Zoomcamp/NYC_Fire_Incident_Proj/etl
    volumes:
      - ./dags:/opt/airflow/dags
      - ./requirements.txt:/requirements.txt
    entrypoint: bash -c "pip install -r /requirements.txt && airflow scheduler"
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
          condition: service_completed_successfully
    networks:
      - pg-network-fire-incidents


  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      # yamllint disable rule:line-length
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      # Required to handle warm shutdown of the celery workers properly
      # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - pg-network-fire-incidents


  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - pg-network-fire-incidents


  airflow-init:
    #image: apache/airflow:2.2.3
    <<: *airflow-common
    entrypoint: /bin/bash
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      #AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres_airflow/airflow
      _AIRFLOW_WWW_USER_USERNAME: airflow
      _AIRFLOW_WWW_USER_PASSWORD: airflow
      PYTHONPATH: /My_Projects/DE_Zoomcamp/NYC_Fire_Incident_Proj/etl
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources
      #- ./dags:/opt/airflow/dags
      #- ./requirements.txt:/requirements.txt
    #entrypoint: bash -c "airflow db init"
    networks:
      - pg-network-fire-incidents
    #depends_on:
    #  - postgres_airflow


  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow
    networks:
      - pg-network-fire-incidents

  # You can enable flower by adding "--profile flower" option e.g. docker-compose --profile flower up
  # or by explicitly targeted on the command line e.g. docker-compose up flower.
  # See: https://docs.docker.com/compose/profiles/
  flower:
    <<: *airflow-common
    command: celery flower
    profiles:
      - flower
    ports:
      - "5555:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - pg-network-fire-incidents


  #####Original Services Postgres and Pgadmin######
  postgres:
    image: postgres:13
    container_name: fire_incidents_db_container
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: fire_incidents_db
    volumes:
      - ./fire_incidents_postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U root"]
      interval: 30s
      timeout: 10s
      retries: 5
    ports:
      - "5432:5432"
    networks:
      - pg-network-fire-incidents

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin-fire-incidents-container
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: root
    ports:
      - "8080:80"
    networks:
      - pg-network-fire-incidents




networks:
  pg-network-fire-incidents:
    external: true

volumes:
  postgres_airflow_data:
  postgres_etl_data:



---------Previous Airflow Docker Compose-----------------